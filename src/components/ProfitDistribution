import { useState, useEffect } from 'react';
import { supabase, Member } from '../lib/supabase';
import { useAuth } from '../contexts/AuthContext';
import { DollarSign, Users, TrendingUp, CheckCircle, Clock } from 'lucide-react';

export default function ProfitDistribution() {
  const { profile } = useAuth();
  const [members, setMembers] = useState<(Member & { sharePercent?: number; profitShare?: number; status?: string })[]>([]);
  const [totalBalances, setTotalBalances] = useState(0);
  const [totalProfit, setTotalProfit] = useState(0);
  const [distributing, setDistributing] = useState(false);

  useEffect(() => {
    loadProfitData();
  }, []);

  const loadProfitData = async () => {
    try {
      // Fetch all members
      const { data: memberData } = await supabase.from('members').select('*');
      const membersList = memberData || [];

      // Calculate total balances
      const totalBal = membersList.reduce((sum, m) => sum + Number(m.account_balance || 0), 0);
      setTotalBalances(totalBal);

      // Fetch total profit (sum of all loan interests earned and not yet distributed)
      const { data: loanData } = await supabase.from('loans').select('*');
      const profit = (loanData || [])
        .filter(l => l.status === 'disbursed')
        .reduce((sum, l) => sum + ((Number(l.amount_approved) || 0) * (Number(l.interest_rate) || 0) / 100) - (l.profit_distributed || 0), 0);
      setTotalProfit(profit);

      // Calculate share % and profit share for each member
      const membersWithProfit = membersList.map(m => {
        const sharePercent = totalBal > 0 ? Number(m.account_balance || 0) / totalBal : 0;
        const profitShare = sharePercent * profit;
        return {
          ...m,
          sharePercent,
          profitShare,
          status: profitShare > 0 ? 'Pending' : 'N/A'
        };
      });

      setMembers(membersWithProfit);
    } catch (err) {
      console.error('Error loading profit data:', err);
    }
  };

  const handleDisburse = async () => {
    setDistributing(true);
    try {
      for (const member of members) {
        if (member.profitShare && member.profitShare > 0) {
          // Update member balance
          await supabase
            .from('members')
            .update({ account_balance: Number(member.account_balance) + member.profitShare })
            .eq('id', member.id);

          // Record transaction
          await supabase.from('transactions').insert({
            member_id: member.id,
            transaction_type: 'profit_share',
            amount: member.profitShare,
            balance_before: member.account_balance,
            balance_after: Number(member.account_balance) + member.profitShare,
            description: 'Profit distribution',
            recorded_by: profile?.id,
          });
        }
      }

      // Mark loans as profit distributed
      await supabase.from('loans').update({ profit_distributed: true }).eq('status', 'disbursed');

      alert('Profit successfully disbursed to all members!');
      loadProfitData();
    } catch (err) {
      console.error('Error distributing profit:', err);
      alert('Error occurred while distributing profit. Check console.');
    } finally {
      setDistributing(false);
    }
  };

  return (
    <div>
      <h2 className="text-2xl font-bold text-gray-800 mb-6">Profit & Distribution</h2>

      {/* Summary Cards */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
        <div className="bg-white rounded-2xl p-5 card-shadow">
          <div className="flex items-center gap-3 mb-3">
            <div className="w-10 h-10 rounded-xl bg-green-100 flex items-center justify-center">
              <DollarSign className="w-5 h-5 text-green-600" />
            </div>
            <span className="text-sm font-medium text-gray-600">Total Profit</span>
          </div>
          <p className="text-2xl font-bold text-gray-800">{totalProfit.toLocaleString()} UGX</p>
        </div>

        <div className="bg-white rounded-2xl p-5 card-shadow">
          <div className="flex items-center gap-3 mb-3">
            <div className="w-10 h-10 rounded-xl bg-blue-100 flex items-center justify-center">
              <Users className="w-5 h-5 text-blue-600" />
            </div>
            <span className="text-sm font-medium text-gray-600">Total Members</span>
          </div>
          <p className="text-2xl font-bold text-gray-800">{members.length}</p>
        </div>

        <div className="bg-white rounded-2xl p-5 card-shadow">
          <div className="flex items-center gap-3 mb-3">
            <div className="w-10 h-10 rounded-xl bg-yellow-100 flex items-center justify-center">
              <TrendingUp className="w-5 h-5 text-yellow-600" />
            </div>
            <span className="text-sm font-medium text-gray-600">Total Balances</span>
          </div>
          <p className="text-2xl font-bold text-gray-800">{totalBalances.toLocaleString()} UGX</p>
        </div>
      </div>

      {/* Distribution Table */}
      <div className="bg-white rounded-2xl card-shadow overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50 border-b border-gray-200">
              <tr>
                <th className="px-6 py-4 text-left text-sm font-semibold text-gray-700">Member</th>
                <th className="px-6 py-4 text-left text-sm font-semibold text-gray-700">Member #</th>
                <th className="px-6 py-4 text-left text-sm font-semibold text-gray-700">Balance (UGX)</th>
                <th className="px-6 py-4 text-left text-sm font-semibold text-gray-700">Share %</th>
                <th className="px-6 py-4 text-left text-sm font-semibold text-gray-700">Profit Share (UGX)</th>
                <th className="px-6 py-4 text-left text-sm font-semibold text-gray-700">Status</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {members.map((m) => (
                <tr key={m.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 text-sm font-medium text-gray-800">{m.full_name}</td>
                  <td className="px-6 py-4 text-sm text-gray-800">{m.member_number}</td>
                  <td className="px-6 py-4 text-sm font-semibold text-gray-800">{Number(m.account_balance).toLocaleString()}</td>
                  <td className="px-6 py-4 text-sm font-semibold text-gray-800">{(m.sharePercent! * 100).toFixed(2)}%</td>
                  <td className="px-6 py-4 text-sm font-semibold text-green-600">{Number(m.profitShare).toLocaleString()}</td>
                  <td className="px-6 py-4">
                    <span className={`status-badge ${m.status === 'Paid' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'} flex items-center gap-1.5 w-fit`}>
                      {m.status === 'Paid' ? <CheckCircle className="w-4 h-4" /> : <Clock className="w-4 h-4" />}
                      {m.status}
                    </span>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Disburse Button */}
      <div className="flex justify-end mt-4">
        <button
          onClick={handleDisburse}
          disabled={distributing || totalProfit <= 0}
          className="px-6 py-2 btn-primary text-white font-medium rounded-xl disabled:opacity-50"
        >
          {distributing ? 'Disbursing...' : 'Disburse Profit'}
        </button>
      </div>
    </div>
  );
}
