import React, { useState, useEffect } from 'react';
import { supabase, Member } from '../lib/supabase';
import { useAuth } from '../contexts/AuthContext';
import { DollarSign, Users, TrendingUp, CheckCircle, Clock } from 'lucide-react';
import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer } from 'recharts';

export default function ProfitDistribution() {
  const { profile } = useAuth();
  const [members, setMembers] = useState<(Member & { sharePercent?: number; profitShare?: number; status?: string })[]>([]);
  const [totalBalances, setTotalBalances] = useState(0);
  const [totalProfit, setTotalProfit] = useState(0);
  const [distributing, setDistributing] = useState(false);

  useEffect(() => {
    loadProfitData();
  }, []);

  const loadProfitData = async () => {
    try {
      // Fetch all members
      const { data: memberData } = await supabase.from('members').select('*');
      const membersList = memberData || [];

      // Calculate total balances
      const totalBal = membersList.reduce((sum, m) => sum + Number(m.account_balance || 0), 0);
      setTotalBalances(totalBal);

      // Fetch total profit (sum of all loan interests earned and not yet distributed)
      const { data: loanData } = await supabase.from('loans').select('*');
      const profit = (loanData || [])
        .filter(l => l.status === 'disbursed')
        .reduce((sum, l) => sum + ((Number(l.amount_approved) || 0) * (Number(l.interest_rate) || 0) / 100) - (l.profit_distributed || 0), 0);
      setTotalProfit(profit);

      // Calculate share % and profit share for each member
      const membersWithProfit = membersList.map(m => {
        const sharePercent = totalBal > 0 ? Number(m.account_balance || 0) / totalBal : 0;
        const profitShare = Math.floor(sharePercent * profit); // no decimals
        return {
          ...m,
          sharePercent,
          profitShare,
          status: profitShare > 0 ? 'Pending' : 'N/A'
        };
      });

      setMembers(membersWithProfit);
    } catch (err) {
      console.error('Error loading profit data:', err);
    }
  };

  const handleDisburse = async (memberId: number) => {
    const member = members.find(m => m.id === memberId);
    if (!member || !member.profitShare || member.profitShare <= 0) return;

    setDistributing(true);
    try {
      const newBalance = Number(member.account_balance) + member.profitShare;

      // Update member balance
      await supabase
        .from('members')
        .update({ account_balance: newBalance })
        .eq('id', memberId);

      // Record transaction
      await supabase.from('transactions').insert({
        member_id: member.id,
        transaction_type: 'profit_share',
        amount: member.profitShare,
        balance_before: member.account_balance,
        balance_after: newBalance,
        description: 'Profit distribution',
        recorded_by: profile?.id,
      });

      // Update UI
      loadProfitData();
    } catch (err) {
      console.error('Error disbursing profit for member:', err);
      alert('Error occurred. Check console.');
    } finally {
      setDistributing(false);
    }
  };

  // Data for chart
  const chartData = members.map(m => ({
    name: m.full_name,
    profit: m.profitShare || 0,
  }));

  return (
    <div className="space-y-8">
      <h2 className="text-3xl font-bold text-gray-800 mb-6">Profit & Distribution</h2>

      {/* Summary Cards */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="bg-white rounded-2xl p-6 shadow hover:shadow-lg transition-all">
          <div className="flex items-center gap-3 mb-3">
            <div className="w-12 h-12 rounded-xl bg-green-100 flex items-center justify-center">
              <DollarSign className="w-6 h-6 text-green-600" />
            </div>
            <span className="text-sm font-medium text-gray-600">Total Profit</span>
          </div>
          <p className="text-2xl font-bold text-gray-800">+UGX {totalProfit.toLocaleString()}</p>
        </div>

        <div className="bg-white rounded-2xl p-6 shadow hover:shadow-lg transition-all">
          <div className="flex items-center gap-3 mb-3">
            <div className="w-12 h-12 rounded-xl bg-blue-100 flex items-center justify-center">
              <Users className="w-6 h-6 text-blue-600" />
            </div>
            <span className="text-sm font-medium text-gray-600">Total Members</span>
          </div>
          <p className="text-2xl font-bold text-gray-800">{members.length}</p>
        </div>

        <div className="bg-white rounded-2xl p-6 shadow hover:shadow-lg transition-all">
          <div className="flex items-center gap-3 mb-3">
            <div className="w-12 h-12 rounded-xl bg-yellow-100 flex items-center justify-center">
              <TrendingUp className="w-6 h-6 text-yellow-600" />
            </div>
            <span className="text-sm font-medium text-gray-600">Total Balances</span>
          </div>
          <p className="text-2xl font-bold text-gray-800">+UGX {totalBalances.toLocaleString()}</p>
        </div>
      </div>

      {/* Chart */}
      <div className="bg-white rounded-2xl shadow p-6">
        <h3 className="text-xl font-semibold mb-4">Profit Distribution Chart</h3>
        <ResponsiveContainer width="100%" height={300}>
          <BarChart data={chartData}>
            <XAxis dataKey="name" tick={{ fontSize: 12 }} />
            <YAxis />
            <Tooltip formatter={(value: number) => `+UGX ${value.toLocaleString()}`} />
            <Bar dataKey="profit" fill="#10B981" />
          </BarChart>
        </ResponsiveContainer>
      </div>

      {/* Distribution Table */}
      <div className="bg-white rounded-2xl shadow overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50 border-b border-gray-200">
              <tr>
                <th className="px-6 py-4 text-left text-sm font-semibold text-gray-700">Member</th>
                <th className="px-6 py-4 text-left text-sm font-semibold text-gray-700">Member #</th>
                <th className="px-6 py-4 text-left text-sm font-semibold text-gray-700">Balance</th>
                <th className="px-6 py-4 text-left text-sm font-semibold text-gray-700">Share %</th>
                <th className="px-6 py-4 text-left text-sm font-semibold text-gray-700">Profit Share</th>
                <th className="px-6 py-4 text-left text-sm font-semibold text-gray-700">Status</th>
                <th className="px-6 py-4 text-center text-sm font-semibold text-gray-700">Action</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {members.map(m => (
                <tr key={m.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 text-sm font-medium text-gray-800">{m.full_name}</td>
                  <td className="px-6 py-4 text-sm text-gray-800">{m.member_number}</td>
                  <td className="px-6 py-4 text-sm font-semibold text-gray-800">+UGX {Number(m.account_balance).toLocaleString()}</td>
                  <td className="px-6 py-4 text-sm font-semibold text-gray-800">{(m.sharePercent! * 100).toFixed(2)}%</td>
                  <td className="px-6 py-4 text-sm font-semibold text-green-600">+UGX {Number(m.profitShare).toLocaleString()}</td>
                  <td className="px-6 py-4">
                    <span className={`px-2 py-1 rounded-full text-xs font-semibold ${m.status === 'Paid' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'} flex items-center gap-1`}>
                      {m.status === 'Paid' ? <CheckCircle className="w-4 h-4" /> : <Clock className="w-4 h-4" />}
                      {m.status}
                    </span>
                  </td>
                  <td className="px-6 py-4 text-center">
                    <button
                      onClick={() => handleDisburse(m.id)}
                      disabled={distributing || !m.profitShare || m.profitShare <= 0}
                      className="px-4 py-1 btn-primary text-white rounded-xl disabled:opacity-50"
                    >
                      {distributing ? 'Processing...' : 'Disburse'}
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}
